# How are the data begin generated? Used to find the correct format
# argus_linux
[flowgenerator]
deviceType = argus_linux

# Specify the flow delimiter which can be a constant string or a regex.
[delimiter]
# Comma separated file. By char splitting. This is faster than regex
string = ,
# Space separated file. By regex
#regex = \s+
# Comma separated file. By regex (slower than by string)
#regex = [,]
# If both are specified, string has precedence

# This is a mapping between the fields in the flows and the corresponding columns in the input used by the program.
# Change the names of the columns to match the text you have in your file. The idea is that we can understand the semantics of each column
[columns]
# column0 should be the start time of the flow
startTime = column0
# column1 should be the duration
duration = column1
# column2 should be the protocol
protocol = column2
# column3 should be the src IP address
src = column3
# column4 should be the src port
sport = column4
# column5 should be the src directionality indicator
direction = column5
# column6 should be the dst IP address
dst = column6
# column7 should be the dst port
dport = column7
# column8 should be state of the flow
state = column8
# column9 should be source type of service (argus specific)
stos = column9
# column10 should be destination type of service (argus specific)
dtos = column10
# column11 should be amount of packets
pkts = column11
# column12 should be amount of bytes
bytes = column12


# If not specified no format checking occures on that column. 
# This could be helpful when slips receives different input formats on the same port. 
[regexes]
column0 = r'\d{1,2}:\d{1,2}:\d{2,4}\s\d{1,2}:\d{1,2}:\d{1,2}.\d+'
column1 = r'\d+'


# Format of the timestamp used in the column startTime. This is the default used by slips. Remember to always use our ra.conf file when reading flows into slips.
[timestamp]
# Default format for argus flows in slips
format = %Y/%m/%d %H:%M:%S.%f
# Other format
#format = %m-%d-%y %H:%M:%S.%f

# This controls the output of slips in a log file. The logging is related to errors and situations about the working of the program.
[logging]
logfile = ./slips.log
# Minimum debug level to show. From the level selected, down, everything will be shown
# logging.DEBUG    Detailed information, typically of interest only when diagnosing problems.
# logging.INFO    Confirmation that things are working as expected.
# logging.WARNING    An indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected.
# logging.ERROR    Due to a more serious problem, the software has not been able to perform some function.
# logging.CRITICAL    A serious error, indicating that the program itself may be unable to continue running.
loglevel = WARNING
# The loglevel works for the file, but the console log is fixed to CRITICAL. This is different from the debug parameter.

# This controls the output of slips in the console
[parameters]
# The verbosity is related to how much data you want to see about the detections useful for an administrator, behaviors, normal and malicious traffic, etc.
verbose = 1
# The debugging is related to how much you want to see about the inner workings of the algorithm, how the models are compared, the flows coming from the file, etc.
debug = 0
